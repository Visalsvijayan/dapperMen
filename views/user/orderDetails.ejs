<%- include("../../views/partials/user/header") %>

<style>
    .order-details-fullwidth {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        line-height: 1.6;
    }
    
    .breadcrumb {
        font-size: 15px;
        color: #666;
        margin-bottom: 25px;
        display: flex;
        align-items: center;
    }
    
    .breadcrumb a {
        color: #0066cc;
        text-decoration: none;
        transition: all 0.3s;
        margin: 0 5px;
    }
    
    .breadcrumb a:hover {
        color: #004499;
        text-decoration: underline;
    }
    
    .breadcrumb .separator {
        color: #999;
        margin: 0 5px;
    }
    
    .order-header-container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 20px;
    }
    
    .order-meta {
        flex: 1;
        min-width: 300px;
    }
    
    .order-id {
        font-size: 22px;
        font-weight: 700;
        margin-bottom: 15px;
        color: #222;
    }
    
    .status-display {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }
    
    .status-title {
        font-size: 16px;
        font-weight: 600;
        margin-bottom: 10px;
        color: #444;
    }
    
    .status-timeline {
        display: flex;
        justify-content: space-between;
        position: relative;
        padding-top: 25px;
    }
    
    .status-timeline::before {
        content: '';
        position: absolute;
        top: 12px;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(to right, #4CAF50 30%, #e0e0e0 30%);
        z-index: 1;
        border-radius: 3px;
    }
    
    .status-step {
        text-align: center;
        position: relative;
        z-index: 2;
        width: 23%;
    }
    
    .status-indicator {
        width: 24px;
        height: 24px;
        background: #e0e0e0;
        border-radius: 50%;
        margin: 0 auto 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        font-weight: bold;
    }
    
    .status-step.active .status-indicator {
        background: #4CAF50;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
    }
    
    .status-label {
        font-size: 13px;
        font-weight: 600;
        color: #666;
    }
    
    .status-step.active .status-label {
        color: #4CAF50;
    }
    
    .order-content {
        display: flex;
        gap: 30px;
        flex-wrap: wrap;
    }
    
    .product-section {
        flex: 2;
        min-width: 400px;
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
    }
    
    .summary-section {
        flex: 1;
        min-width: 300px;
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        align-self: flex-start;
    }
    
    .section-title {
        font-size: 18px;
        font-weight: 700;
        margin-bottom: 20px;
        color: #222;
        padding-bottom: 10px;
        /* border-bottom: 1px solid #e0e0e0; */
    }
    
    .product-card {
        display: flex;
        gap: 20px;
        padding: 15px 0;
        /* border-bottom: 1px solid #e0e0e0; */
    }
    
    .product-card:last-child {
        border-bottom: none;
    }
    
    .product-image {
        width: 120px;
        height: 120px;
        background: #e0e0e0;
        border-radius: 6px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #999;
        font-size: 14px;
        flex-shrink: 0;
        overflow: hidden;
    }
    
    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .product-info {
        flex-grow: 1;
    }
    
    .product-name {
        font-size: 17px;
        font-weight: 600;
        margin-bottom: 8px;
        color: #222;
    }
    
    .product-spec {
        display: flex;
        margin-bottom: 6px;
        font-size: 14px;
    }
    
    .spec-label {
        font-weight: 500;
        color: #555;
        min-width: 80px;
    }
    
    .spec-value {
        color: #333;
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        font-size: 15px;
    }
    
    .summary-total {
        font-weight: 700;
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #e0e0e0;
        font-size: 17px;
    }
    
    .payment-info {
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #e0e0e0;
    }
    
    .payment-method {
        display: flex;
        gap: 10px;
        align-items: center;
        font-size: 15px;
    }
    
    .payment-icon {
        font-size: 20px;
        color: #4CAF50;
    }
    
    .action-buttons {
        margin-top: 30px;
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }
    
    .btn {
        padding: 12px 25px;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }
    
    .btn-cancel {
        background: #ff4444;
        color: white;
    }
    
    .btn-cancel:hover {
        background: #e53935;
        transform: translateY(-2px);
    }
    
    .btn-help {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #ddd;
    }
    
    .btn-help:hover {
        background: #e9ecef;
    }



    .status-display {
  margin: 30px 0;
}

.status-title {
  font-weight: bold;
  margin-bottom: 10px;
  text-align: center;
}

.status-timeline {
  display: flex;
  justify-content: space-between;
  position: relative;
  margin-top: 30px;
}

.status-step {
  text-align: center;
  flex: 1;
  position: relative;
}

.status-step:not(:last-child)::after {
  content: '';
  position: absolute;
  top: 15px;
  left: 50%;
  width: 100%;
  height: 4px;
  background-color: #ccc;
  z-index: -1;
  transform: translateX();
}

 
.status-step.line-active:not(:last-child)::after {
  background-color: green;
}


.status-indicator {
  width: 30px;
  height: 30px;
  margin: 0 auto;
  background-color: #ccc;
  color: white;
  border-radius: 50%;
  line-height: 30px;
  font-weight: bold;
  z-index: 1;
  position: relative;
}

.status-step.active .status-indicator {
  background-color: green;
}

.status-label {
  margin-top: 8px;
  font-size: 12px;
  color: #444;
}

.status-step.active .status-label {
  color: green;
}
.billing-section {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
    margin-top: 30px;
    font-size: 15px;
    color: #333;
}

.billing-section .section-title {
    font-size: 18px;
    font-weight: 700;
    color: #222;
    border-bottom: 1px solid #e0e0e0;
    padding-bottom: 10px;
    margin-bottom: 15px;
}

.billing-info div {
    margin-bottom: 8px;
    line-height: 1.4;
}
a{
    text-decoration: none;
}




    
    @media (max-width: 768px) {
        .order-content {
            flex-direction: column;
        }
        
        .product-section, .summary-section {
            min-width: 100%;
        }
    }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
 

<div class="order-details-fullwidth"  >
    <div class="breadcrumb">
        <a href="/">Home</a> <span class="separator">></span> 
        <a href="/userProfile#orders">My Orders</a> <span class="separator">></span> 
        <span> #<%=orders.orderId%></span>
    </div>
    <div id="invoice">
        <div class="order-header-container">
            <div class="order-meta">
                <div class="order-id">Date : 
                                        <%
                    const createdDate = new Date(orders.createdOn);
                    const options = { day: '2-digit', month: 'long', year: 'numeric' };
                    const formattedDate = createdDate.toLocaleDateString('en-GB', options);
                    let hours = createdDate.getHours();
                    const minutes = createdDate.getMinutes().toString().padStart(2, '0');
                    const ampm = hours >= 12 ? 'PM' : 'AM';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // 0 => 12
                    %>
                    <%= formattedDate %> : <%= hours %> <%= ampm %>

                
                </div>
                <!-- the status bar-->
                <%if(orders.status!=='Cancelled'&&orders.status!=='Reject Return Request'){%>
                 
                <div class="status-display">
                    <div class="status-title">Order Status</div>
                    <div class="" style="display: flex;" >
                        <% const statusSteps = ['Pending', 'Processing', 'Shipped', 'Delivered', 'Return Request', 'Returned']; %>
                        <% const currentStatusIndex = statusSteps.indexOf(orders.status.trim()); %>
                
                        <% statusSteps.forEach((step, index) => { %>
                            <div class="status-step <%= index <= currentStatusIndex ? 'active' : '' %>">
                                <div class="status-indicator"><%= index+1%></div>
                                <div class="status-label"><%= step %></div>
                            </div>
                        <% }) %>
                    </div>
                </div>
                <%}else{%>
                    <div class="w-100 position-relative my-4" style="height: 4px; background-color: #dc3545; border-radius: 2px;">
                        <!-- Cancelled point at the end -->
                        <div class="position-absolute" style="top: 50%; right:40px; transform: translate(50%, -50%); text-align: center;">
                          <div class="bg-danger rounded-circle" style="width: 16px; height: 16px;"></div>
                          
                          <%if(orders.status==='Cancelled'){%>
                             <div class="text-danger fw-bold mt-1"><strong>Cancelled</strong></div>
                          <%}else if(orders.status==='Reject Return Request'){%>
                             <div class="text-danger fw-bold mt-1"><strong>Reject return request</strong></div>
                          <%}else if(orders.status==='Payment Pending'){%>
                            <div class="text-danger fw-bold mt-1"> <strong>Order Incomplete. Make Your Payment</strong> </div>   
                         <%}%> 
                            

                        </div>
                      </div>
                <%}%>      
            </div>
        </div>
        
        <div class="order-content">
            <div class="product-section">
                <%orders.orderItems.forEach(item=>{%>
                    
                    
                    <div class="section-title">Product Details</div>
                    
                    <div class="product-card">
                        <div class="product-image">
                            <img src="/uploads/product-images/<%= item.product.productImage[0] %>" alt="product image"  >
                            
                            
                        </div>
                        <div class="product-info">
                            <div class="product-name"><%= item.product.productName%></div>
                            <div class="product-spec">
                                <span class="spec-label">Quantity:</span>
                                <span class="spec-value"><%= item.quantity%></span>
                            </div>
                            <div class="product-spec">
                                <span class="spec-label">Price:</span>
                                <span class="spec-value">₹<%=item.price%></span>
                            </div>
                            <div class="product-spec">
                                <span class="spec-label">Status:</span>
                                <span class="spec-value"><button style="background-color: rgb(248, 154, 12); border-radius: 20px ;color: white;">
                                    <%if(item.productStatus==='Cancelled'){%>
                                         Cancelled
                                    <%}else{%>
                                      <%=orders.status%>
                                    <%}%>  
                                </button></span>
                            </div>
                            <%if(orders.orderItems.length>1 &&( !['Cancelled','Delivered','Returned','Return Request','Reject Return Request'].includes(orders.status))){ %> 
                                <%if(item.productStatus!=='Cancelled'){%>
                                <div class="d-flex">
                                    <button  onclick="cancelSingleProduct('<%= orders._id %>','<%= item.product._id%>',event)" class="btn btn-danger ms-auto py-1 px-2" style="font-size: 0.8rem;">Cancel</button>
                                </div>
                                <%}%>
                            <%}%>

                             
                        </div>
                    </div>
               <%})%> 
               <div>
                 <%if(orders.status==='Delivered'){%>
                    <p><strong>Product Delivered:  <%= new Date(orders.deliverdAt).toLocaleDateString('en-GB') %>
                    </strong></p>
                 <%}%>   
               </div>
            </div>
            
            <div class="summary-section">
                <div class="section-title">Order Summary</div>
                
                <div class="summary-row">
                    <span>Subtotal:</span>
                    <span>₹<%=orders.totalPrice%></span>
                </div>
                <div class="summary-row">
                    <span>Delivery Charge:</span>
                    <span>₹50</span>
                </div>
                <div class="summary-row">
                    <span>Discount:</span>
                    <span>₹<%=orders.discount%></span>
                </div>
                <div class="summary-row summary-total">
                    <span>Total:</span>
                    <span>₹ <%=orders.finalAmount%></span>
                </div>
                
                <div class="payment-info">
                    <div class="payment-method">
                        <i class="payment-icon fas fa-money-bill-wave"></i>
                        <span><strong>Payment Method:</strong> 
                            <%if(orders.payment==='cod'){%>
                            CASH ON DELIVERY
            
                            <%}else if(orders.payment==='wallet'){%>
                              WALLET 
                            <%}else{%>
                                RAZORPAY 
                            <%}%>      
                        </span>
                       
                    </div>
                </div>
            </div>
        </div>

         <!-- Billing & Shipping Information -->
         <div class="billing-section">
            <div class="section-title">Shipped To</div>
            <div class="billing-info">
                <%if(address){%>
                <div><strong>Name    :</strong> <%= address.name %></div>
                <div><strong>Mobile  :</strong> <%=address.phone %></div>
                <div><strong>Address :</strong> <%= address.addressType %></div>
                <div><strong>City    :</strong> <%= address.city %></div>
                <div><strong>Landmark:</strong> <%= address.landMark %></div>
                <div><strong>Pincode :</strong> <%=address.pincode %></div>
                <div><strong>State   :</strong> <%= address.state %></div>
                <%}else{%>
                    <p>No address</p>
                <%}%>    
            </div>
        </div>
     
    </div>
    
    <div class="action-buttons">
         
        
        <button class="btn btn-danger" 
            onclick="confirmCancelOrder('<%= orders._id %>', event)"
                <% if(['Cancelled','Delivered','Returned','Return Request','Reject Return Request'].includes(orders.status)){ %> 
                    disabled style="opacity: 0.5; pointer-events: none;" 
                <% } %>>
            <i class="fas fa-times-circle"></i>
            CANCEL ORDER
        </button>


        <button type="button"  class="btn btn-success"  onclick="downloadInvoice('<%=orders._id%>')">
            <i class="fa-solid fa-download"></i>DOWNLOAD INVOICE
        </button>
        <%if(orders.status==='Delivered'){%>
            <button id="return-Product" class="btn btn-primary"><i class="fas fa-undo"></i>RETURN PRODUCT</button>
        <%}%>
        <%if(orders.status==='Payment Pending'){%>
            <button id="retryPaymentBtn" class="btn btn-primary" onclick="retryPayment('<%=orders._id%>')"><i class="fas fa-undo"></i>Retry Payment</button>
        <%}%>
        
    </div>
    <!-- Hidden section: radio buttons + proceed button -->
    <div id="paymentOptions" style="display: none; margin-top: 10px;">
    <p>Select a payment method:</p>
    
    <label><input type="radio" name="paymentMethod" value="wallet"> Wallet</label><br>
    <label><input type="radio" name="paymentMethod" value="razorpay"> Razorpay</label><br>
    <label><input type="radio" name="paymentMethod" value="cod"> Cash on Delivery</label><br>

    <button id="proceedPaymentBtn" class="btn btn-success" style="margin-top: 10px;">Proceed</button>
    </div>
   
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
 
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>

<script>
    
    function confirmCancelOrder(orderId,event) {
        event.preventDefault();
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to cancel this Order?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e74c3c',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Redirect to the cancel URL (GET request or can also be POST via AJAX)
                window.location.href = `/cancel-Order?orderId=${orderId}`;
            }
        });
    }


    function downloadInvoice(orderId) {
            const element = document.getElementById('invoice');

            const opt = {
                margin: 0, // Remove large top margin
                filename: 'invoice.pdf',
                image: { type: 'jpeg', quality: 0.98 },
                html2canvas: {
                    scale: 2,
                    scrollY: 0 // Prevent cropping from scroll
                },
                jsPDF: {
                    unit: 'in',
                    format: 'a4',
                    orientation: 'portrait'
                },
                pagebreak: { mode: ['avoid-all', 'css', 'legacy'] } // Handle page breaks
            };

            html2pdf().set(opt).from(element).save()
                .then(() => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Invoice Downloaded!',
                        text: 'Your invoice PDF has been successfully downloaded.',
                        timer: 3000,
                        showConfirmButton: false
                    });
                })
                .catch((err) => {
                    console.error("PDF error:", err);
                    alert("PDF generation failed.");
                });
        }

    //return product function

     
    document.getElementById('return-Product').addEventListener('click', async (event) => {
    event.preventDefault();
    const orderId = "<%=orders._id%>";

    try {
        const { value: reason } = await Swal.fire({
            title: 'Return Reason',
            input: 'textarea',
            inputLabel: 'Please provide a reason for return:',
            inputPlaceholder: 'Type your reason here...',
            inputAttributes: {
                'aria-label': 'Return reason'
            },
            showCancelButton: true,
            confirmButtonText: 'Submit',
            cancelButtonText: 'Cancel'
        });

        if (reason) {
            const confirmResult = await Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to request a return for this order?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, return it!',
                cancelButtonText: 'Cancel'
            });

            if (confirmResult.isConfirmed) {
                const response = await fetch(`/return-Order-Request/${orderId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        status: 'Return Request',
                        reason: reason
                    }),
                });

                const data = await response.json();

                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: "Status Updated",
                        text: "Order status updated successfully",
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed!',
                        text: 'Failed to return the product.'
                    });
                }
            }
        } else {
            // Optional: alert if user didn't provide a reason
            Swal.fire({
                icon: 'info',
                title: 'Cancelled',
                text: 'Return request was cancelled or no reason provided.'
            });
        }

    } catch (error) {
        console.error("Return product error:", error);
        Swal.fire({
            icon: 'error',
            title: 'Oops!',
            text: 'Something went wrong. Please try again.'
        });
    }
});

function cancelSingleProduct(orderId,productId,event){
    event.preventDefault();
    Swal.fire({
            title: 'Are you sure?',
            text: "Do you really want to cancel this product?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e74c3c',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, cancel it!'
        })
        .then((result) => {
        if (result.isConfirmed) {
            fetch(`/orders/${orderId}/items/${productId}/cancel`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(res => res.json())
            .then(data => {
                if (data.message === 'Product cancelled successfully') {
                    Swal.fire(
                        'Cancelled!',
                        'The product has been cancelled.',
                        'success'
                    ).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire(
                        'Failed!',
                        data.message || 'Something went wrong.',
                        'error'
                    );
                }
            })
            .catch(error => {
                console.error('Error cancelling product:', error);
                Swal.fire(
                    'Error!',
                    'Something went wrong.',
                    'error'
                );
            });
        }
    });


}
//retry payment function
 function retryPayment(orderId){

    document.getElementById("retryPaymentBtn").addEventListener("click", function () {
    document.getElementById("paymentOptions").style.display = "block";
     // Handle Proceed button click
  document.getElementById("proceedPaymentBtn").addEventListener("click",async function () {
    
    const selectedMethod = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedMethod) {
      alert("Please select a payment method.");
      return;
    }

    const method = selectedMethod.value;

    //  handle based on selected method
    if (method === "wallet") {
      
        try {
            const res = await fetch(`/retryPayment/wallet/${orderId}`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json"
            }
          });
          const data = await res.json();
          if (data.success) {
            Swal.fire("Success", "Wallet payment successful!", "success")
              .then(() => window.location.reload());
          } else {
            Swal.fire("Error", data.message || "Wallet payment failed", "error");
          }
        } catch (err) {
          console.error("Wallet retry error:", err);
          res.redirect('/pageNotFound')
        }

    } else if (method === "razorpay") {
      // trigger razorpay flow
      try {
        const res=await fetch(`/retryPayment/razorpay/${orderId}`,{
            method:'GET',
            headers:{
                "Content-Type":"application/json"
            }
        })
        const data=await res.json();
        if(data.success){
            
             initiateRazorpay(
                data.amount,
                data.razorpayOrder,
                data.orderId,
                data.key_id,
                data.orderIdViewOrder
                             
            );

        }
        else{
            
            Swal.fire({
                icon:'error',
                text:'Error in Creating razorpay instance',
                title:data.message
            });
        }
        
      } catch (error) {
        console.error("Error in Razorpay initiation:", error);
        
         
      }
       
    } else if (method === "cod") {
       try {
        const res=await fetch(`/retryPayment/cod/${orderId}`,{
            method:'PATCH',
            headers:{
                "Content-Type":"application/json"
            }
        });
        const data=await res.json();
        if(data.success){
            Swal.fire("Success", "Order with Cash On Delivery Successful!", "success")
            .then(() => window.location.reload()); 
        }
        else {
            Swal.fire("Error", data.message || "Cash on delivery payment failed", "error");
        }
       } catch (error) {
            console.error("Cod retry error:", err);
            res.redirect('/pageNotFound')
       }
       
    }
  });
  });
}

//initialize razorpay
 
function initiateRazorpay(amount, razorpayOrder, orderId, key_id, orderIdViewOrder) {
    const options = {
        key: key_id,
        amount: amount,
        currency: "INR",
        name: "dapperMen",
        description: "Thank you for shopping",
        order_id: razorpayOrder.id,
        handler: async function (response) {
            try {
                const res = await fetch(`/retryPayment/verify-razorpay/${orderId}`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                    })
                });
                const data = await res.json();
                if (data.success) {
                    Swal.fire({
                        title: 'Payment Successful!',
                        text: 'Your order has been completed.',
                        icon: 'success'
                    }).then(() => {
                        window.location.reload();
                        // window.location.href = `/place-order-success?orderId=${data.orderId}`;
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Error',
                        text: 'Payment not done'
                    });
                }
            } catch (err) {
                console.error("Error verifying payment", err);
            }
        },

        modal: {
            // Simply allow user to close the modal; don't call showFailure here
            ondismiss: function () {
                console.log("Payment modal closed by user");
            }
        },

        retry: {
            enabled: false
        },

        theme: {
            color: "#3399cc",
            hide_topbar: true
        }
    };

    const rzp = new Razorpay(options);
    rzp.open();

    rzp.on("payment.failed", function (response) {
        const error = response.error;
        showFailure(
            error.description || "Payment failed",
            error.code
        );
    });

    function showFailure(message, errorCode) {
        Swal.fire({
            title: "Payment Failed",
            html: `
                <p>${message}</p>
                ${errorCode ? `<small>Error code: ${errorCode}</small>` : ''}
            `,
            icon: "error",
            showCancelButton: true,
            confirmButtonText: "Retry Payment",
            cancelButtonText: "View Order",
            allowOutsideClick: false
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`/retryPayment/validate-stock/${orderId}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            initiateRazorpay(amount, razorpayOrder, orderId, key_id, orderIdViewOrder);
                        } else {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Stock Issue',
                                text: `${data.message}`
                            }).then(() => {
                                window.location.href = `/order-Details?orderId=${orderIdViewOrder}`;
                            });
                        }
                    });
            } else {
                window.location.href = `/order-Details?orderId=${orderIdViewOrder}`;
            }
        });
    }
}

 

</script>
<%- include("../../views/partials/user/footer") %>